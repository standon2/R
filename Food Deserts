library(devtools)
install_github("estebanlp/GoogleDataSearch", force = TRUE)
library(GoogleDataSearch)
myapikey<-"AIzaSyDxCRYnsxiShT-Xdba_7hSFonjS-w5rV9U"
CRest<-GooglePlaceSearch(query="Grocery stores in Champaign, IL",apikey=myapikey)
URest<-GooglePlaceSearch(query="Grocery stores in Urbana, IL",apikey=myapikey)
CURest<-rbind(CRest,URest)
CURest<-unique(CURest)
View(CURest)
?rbind

CURest$store_lat<-as.numeric(CURest$store_lat)
CURest$store_lon<-as.numeric(CURest$store_lon)
# plotting in ggplot
install.packages("ggplot2",dependencies = TRUE)
install.packages("ggmap",dependencies = TRUE)
install.packages
library(ggplot2)
library(ggmap)
d<-ggplot(CURest, aes(x = store_lon, y = store_lat))
dp<-d + geom_point(data=CURest, aes(x = store_lon, y = store_lat, size=store_rating,colour=store_type))
dp
dp<- dp + geom_density2d() + theme(legend.position = "bottom")
dp
# plotting points in ggmap
aa<-get_map(c(lon=-88.2139522,lat=40.1088374),zoom=13)
ggmap(aa)
ggmap(aa) + geom_point(data=CURest, aes(x = store_lon, y = store_lat, size=store_rating,colour=store_type))
# plotting densities in ggmap
ggmap(aa) + stat_density2d(aes(x = store_lon, y = store_lat, fill = ..level.., alpha = ..level..), geom = "polygon", data = CURest) + scale_fill_gradient(low = "black", high = "red")
install.packages("sp")
library(maptools)
proj.cuCT<- "+proj=longlat +datum=WGS84 +no_defs"
proj.cuBG<-"+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"
#reading shapefile
cuBG <- readShapePoly("CU_cityBlockGroups/CU_cityBlockGroups.shp",proj4string = CRS(as.character(proj.cuBG)))

voronoi2<-function (xy,rw=NULL) 
{
  if (!requireNamespace("deldir")) {
    stop("you need to first install the deldir library")
  }
  dat <- NULL
  sp <- FALSE
  if (inherits(xy, "Spatial")) {
    if (.hasSlot(xy, "data")) {
      dat <- slot(xy, "data")
    }
    prj <- proj4string(xy)
    sp <- TRUE
    xy <- coordinates(xy)
    dups <- duplicated(xy)
    if (any(dups)) {
      xy <- xy[!dups, , drop = FALSE]
      dat <- dat[!dups, , drop = FALSE]
    }
  }
  else {
    xy <- na.omit(xy[, 1:2])
    xy <- unique(xy)
  }
  z <- deldir::deldir(xy[, 1], xy[, 2],rw=rw)
  w <- deldir::tile.list(z)
  polys <- vector(mode = "list", length = length(w))
  for (i in seq(along = polys)) {
    pcrds <- cbind(w[[i]]$x, w[[i]]$y)
    pcrds <- rbind(pcrds, pcrds[1, ])
    polys[[i]] <- Polygons(list(Polygon(pcrds)), as.character(i))
  }
  if (sp) {
    polys <- SpatialPolygons(polys, proj4string = CRS(prj))
  }
  else {
    polys <- SpatialPolygons(polys)
  }
  if (is.null(dat)) {
    dat <- data.frame(id = 1:nrow(xy), xy)
  }
  rownames(dat) <- row.names(polys)
  polys <- SpatialPolygonsDataFrame(polys, data = dat)
  return(polys)
}


#creating a points shapefile from the data
# x= longitude, y = lattitude (http://www.latlong.net/)
CURest.points<-CURest
coordinates(CURest.points)<-~store_lon+store_lat
proj4string(CURest.points)<-CRS(as.character(proj.cuBG))
class(CURest.points)
install.packages("deldir")
install.packages("sp")
RSiteSearch("voronoi")
v1<-voronoi2(CURest.points)
plot(cuBG)
plot(CURest.points,col='blue',add=T,pch=21,cex=0.5)
plot(v1,border='red',add=T)

source("voronoi2.R")
window<-as.numeric(c(attributes(cuBG)$bbox[1,],attributes(cuBG)$bbox[2,]))
v2<-voronoi2(CURest.points,rw = window)
plot(cuBG)
plot(CURest.points,col='blue',add=T,pch=21,cex=0.5)
plot(v2,border='red',add=T)

install.packages('acs',dependencies = TRUE)
library(acs)
help(package='acs')
api.key.install(key = "33ec9ead0b98634c1975e69a568d683c2027bff4")
CH.Tracts<-as.numeric(gsub(pattern = "170190", replacement = "",levels(cuBG$TRACTCE)))
CH.BGs<- as.numeric(gsub(pattern = "170190", replacement = "",levels(cuBG$BLKGRPCE)))
#creating a spatial area
CH.BGs<-geo.make(state = cuBG$STATEFP,county = cuBG$COUNTYFP,tract = cuBG$TRACTCE,block.group = cuBG$BLKGRPCE)
CH.BGs<-geo.make(state = "IL",county = "Champaign",tract = "*",block.group = "*")
#fecthing data
Data1<- acs.fetch(geography = CH.BGs,table.number = "B01003",endyear = 2014,col.names = "pretty")
Data1
view(Data1)
library(tmap)
library(scales)
View(cuBG)
cuBG2<-append_data(cuBG,Data1,key.shp ="GEOID",key.data = "GEOID")
b1 <- quantile(cuBG2@data$Total.Population..Total, probs=seq(0,1,0.2),na.rm = FALSE)
np1 <- findInterval(cuBG2@data$Total.Population..Total, b1, all.inside=TRUE)
colors <- sort(heat.colors(5, alpha = 0.8),decreasing = T)
plot(cuBG2,col=colors[np1], main="Population in CU")
legend("bottomleft", legend=leglabs(round(b1, digits=2)),
       fill=colors, bty="n", cex=0.8)
